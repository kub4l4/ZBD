{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nvar _a;\nimport { __decorate, __metadata } from \"tslib\";\nimport '../../focus/focus-ring.js';\nimport '../../ripple/ripple.js';\nimport { html, LitElement, nothing } from 'lit';\nimport { property, query, queryAsync, state } from 'lit/decorators.js';\nimport { when } from 'lit/directives/when.js';\nimport { dispatchActivationClick, isActivationClick, redispatchEvent } from '../../controller/events.js';\nimport { FormController, getFormValue } from '../../controller/form-controller.js';\nimport { ariaProperty } from '../../decorators/aria-property.js';\nimport { pointerPress, shouldShowStrongFocus } from '../../focus/strong-focus.js';\nimport { ripple } from '../../ripple/directive.js';\nimport { SingleSelectionController } from './single-selection-controller.js';\nconst CHECKED = Symbol('checked');\n/**\n * @fires checked\n */\nexport class Radio extends LitElement {\n  constructor() {\n    super();\n    this[_a] = false;\n    this.disabled = false;\n    /**\n     * The element value to use in form submission when checked.\n     */\n    this.value = 'on';\n    /**\n     * The HTML name to use in form submission.\n     */\n    this.name = '';\n    this.selectionController = new SingleSelectionController(this);\n    this.showFocusRing = false;\n    this.showRipple = false;\n    this.getRipple = () => {\n      this.showRipple = true;\n      return this.ripple;\n    };\n    this.renderRipple = () => {\n      return html`<md-ripple unbounded ?disabled=${this.disabled}></md-ripple>`;\n    };\n    this.addController(new FormController(this));\n    this.addController(this.selectionController);\n    this.addEventListener('click', event => {\n      if (!isActivationClick(event)) {\n        return;\n      }\n      this.focus();\n      dispatchActivationClick(this.input);\n    });\n  }\n  get checked() {\n    return this[CHECKED];\n  }\n  set checked(checked) {\n    const wasChecked = this.checked;\n    if (wasChecked === checked) {\n      return;\n    }\n    this[CHECKED] = checked;\n    this.requestUpdate('checked', wasChecked);\n    this.selectionController.handleCheckedChange();\n  }\n  /**\n   * The associated form element with which this element's value will submit.\n   */\n  get form() {\n    return this.closest('form');\n  }\n  [(_a = CHECKED, getFormValue)]() {\n    return this.checked ? this.value : null;\n  }\n  focus() {\n    this.input?.focus();\n  }\n  render() {\n    return html`\n      ${when(this.showRipple, this.renderRipple)}\n      ${this.renderFocusRing()}\n      <svg class=\"icon\" viewBox=\"0 0 20 20\">\n        <mask id=\"cutout\">\n          <rect width=\"100%\" height=\"100%\" fill=\"white\" />\n          <circle cx=\"10\" cy=\"10\" r=\"8\" fill=\"black\" />\n        </mask>\n        <circle class=\"outer circle\" cx=\"10\" cy=\"10\" r=\"10\" mask=\"url(#cutout)\" />\n        <circle class=\"inner circle\" cx=\"10\" cy=\"10\" r=\"5\" />\n      </svg>\n      <input\n        type=\"radio\"\n        name=${this.name}\n        aria-label=${this.ariaLabel || nothing}\n        .checked=${this.checked}\n        .value=${this.value}\n        ?disabled=${this.disabled}\n        @change=${this.handleChange}\n        @focus=${this.handleFocus}\n        @blur=${this.handleBlur}\n        @pointerdown=${this.handlePointerDown}\n        ${ripple(this.getRipple)}\n      >\n    `;\n  }\n  handleBlur() {\n    this.showFocusRing = false;\n  }\n  handleFocus() {\n    this.showFocusRing = shouldShowStrongFocus();\n  }\n  handleChange(event) {\n    if (this.disabled) {\n      return;\n    }\n    // Per spec, the change event on a radio input always represents checked.\n    this.checked = true;\n    redispatchEvent(this, event);\n  }\n  handlePointerDown() {\n    pointerPress();\n    this.showFocusRing = shouldShowStrongFocus();\n  }\n  renderFocusRing() {\n    return html`<md-focus-ring .visible=${this.showFocusRing}></md-focus-ring>`;\n  }\n}\nRadio.shadowRootOptions = {\n  ...LitElement.shadowRootOptions,\n  delegatesFocus: true\n};\nRadio.formAssociated = true;\n__decorate([property({\n  type: Boolean,\n  reflect: true\n}), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], Radio.prototype, \"checked\", null);\n__decorate([property({\n  type: Boolean,\n  reflect: true\n}), __metadata(\"design:type\", Object)], Radio.prototype, \"disabled\", void 0);\n__decorate([property({\n  type: String\n}), __metadata(\"design:type\", Object)], Radio.prototype, \"value\", void 0);\n__decorate([property({\n  type: String,\n  reflect: true\n}), __metadata(\"design:type\", Object)], Radio.prototype, \"name\", void 0);\n__decorate([ariaProperty // tslint:disable-line:no-new-decorators\n, property({\n  attribute: 'data-aria-label',\n  noAccessor: true\n}), __metadata(\"design:type\", String)], Radio.prototype, \"ariaLabel\", void 0);\n__decorate([query('input'), __metadata(\"design:type\", HTMLInputElement)], Radio.prototype, \"input\", void 0);\n__decorate([queryAsync('md-ripple'), __metadata(\"design:type\", Promise)], Radio.prototype, \"ripple\", void 0);\n__decorate([state(), __metadata(\"design:type\", Object)], Radio.prototype, \"showFocusRing\", void 0);\n__decorate([state(), __metadata(\"design:type\", Object)], Radio.prototype, \"showRipple\", void 0);","map":{"version":3,"mappings":"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","names":["html","LitElement","nothing","property","query","queryAsync","state","when","dispatchActivationClick","isActivationClick","redispatchEvent","FormController","getFormValue","ariaProperty","pointerPress","shouldShowStrongFocus","ripple","SingleSelectionController","CHECKED","Symbol","Radio","constructor","showRipple","disabled","addController","selectionController","addEventListener","event","focus","input","checked","wasChecked","requestUpdate","handleCheckedChange","form","closest","value","render","renderRipple","renderFocusRing","name","ariaLabel","handleChange","handleFocus","handleBlur","handlePointerDown","getRipple","showFocusRing","shadowRootOptions","delegatesFocus","__decorate","type","Boolean","reflect","String","attribute","noAccessor","HTMLInputElement"],"sources":["C:\\Users\\macie\\IdeaProjects\\ztbd\\node_modules\\@material\\web\\radio\\lib\\radio.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../focus/focus-ring.js';\nimport '../../ripple/ripple.js';\n\nimport {html, LitElement, nothing, TemplateResult} from 'lit';\nimport {property, query, queryAsync, state} from 'lit/decorators.js';\nimport {when} from 'lit/directives/when.js';\n\nimport {dispatchActivationClick, isActivationClick, redispatchEvent} from '../../controller/events.js';\nimport {FormController, getFormValue} from '../../controller/form-controller.js';\nimport {ariaProperty} from '../../decorators/aria-property.js';\nimport {pointerPress, shouldShowStrongFocus} from '../../focus/strong-focus.js';\nimport {ripple} from '../../ripple/directive.js';\nimport {MdRipple} from '../../ripple/ripple.js';\n\nimport {SingleSelectionController} from './single-selection-controller.js';\n\nconst CHECKED = Symbol('checked');\n\n/**\n * @fires checked\n */\nexport class Radio extends LitElement {\n  static override shadowRootOptions:\n      ShadowRootInit = {...LitElement.shadowRootOptions, delegatesFocus: true};\n\n  static formAssociated = true;\n\n  @property({type: Boolean, reflect: true})\n  get checked() {\n    return this[CHECKED];\n  }\n  set checked(checked: boolean) {\n    const wasChecked = this.checked;\n    if (wasChecked === checked) {\n      return;\n    }\n\n    this[CHECKED] = checked;\n    this.requestUpdate('checked', wasChecked);\n    this.selectionController.handleCheckedChange();\n  }\n\n  [CHECKED] = false;\n\n  @property({type: Boolean, reflect: true}) disabled = false;\n\n  /**\n   * The element value to use in form submission when checked.\n   */\n  @property({type: String}) value = 'on';\n\n  /**\n   * The HTML name to use in form submission.\n   */\n  @property({type: String, reflect: true}) name = '';\n\n  @ariaProperty  // tslint:disable-line:no-new-decorators\n  @property({attribute: 'data-aria-label', noAccessor: true})\n  override ariaLabel!: string;\n\n  /**\n   * The associated form element with which this element's value will submit.\n   */\n  get form() {\n    return this.closest('form');\n  }\n\n  @query('input') private readonly input!: HTMLInputElement|null;\n  @queryAsync('md-ripple') private readonly ripple!: Promise<MdRipple|null>;\n  private readonly selectionController = new SingleSelectionController(this);\n  @state() private showFocusRing = false;\n  @state() private showRipple = false;\n\n  constructor() {\n    super();\n    this.addController(new FormController(this));\n    this.addController(this.selectionController);\n    this.addEventListener('click', (event: Event) => {\n      if (!isActivationClick(event)) {\n        return;\n      }\n      this.focus();\n      dispatchActivationClick(this.input!);\n    });\n  }\n\n  [getFormValue]() {\n    return this.checked ? this.value : null;\n  }\n\n  override focus() {\n    this.input?.focus();\n  }\n\n  protected override render(): TemplateResult {\n    return html`\n      ${when(this.showRipple, this.renderRipple)}\n      ${this.renderFocusRing()}\n      <svg class=\"icon\" viewBox=\"0 0 20 20\">\n        <mask id=\"cutout\">\n          <rect width=\"100%\" height=\"100%\" fill=\"white\" />\n          <circle cx=\"10\" cy=\"10\" r=\"8\" fill=\"black\" />\n        </mask>\n        <circle class=\"outer circle\" cx=\"10\" cy=\"10\" r=\"10\" mask=\"url(#cutout)\" />\n        <circle class=\"inner circle\" cx=\"10\" cy=\"10\" r=\"5\" />\n      </svg>\n      <input\n        type=\"radio\"\n        name=${this.name}\n        aria-label=${this.ariaLabel || nothing}\n        .checked=${this.checked}\n        .value=${this.value}\n        ?disabled=${this.disabled}\n        @change=${this.handleChange}\n        @focus=${this.handleFocus}\n        @blur=${this.handleBlur}\n        @pointerdown=${this.handlePointerDown}\n        ${ripple(this.getRipple)}\n      >\n    `;\n  }\n\n  private handleBlur() {\n    this.showFocusRing = false;\n  }\n\n  private handleFocus() {\n    this.showFocusRing = shouldShowStrongFocus();\n  }\n\n  private handleChange(event: Event) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Per spec, the change event on a radio input always represents checked.\n    this.checked = true;\n    redispatchEvent(this, event);\n  }\n\n  private handlePointerDown() {\n    pointerPress();\n    this.showFocusRing = shouldShowStrongFocus();\n  }\n\n  private readonly getRipple = () => {\n    this.showRipple = true;\n    return this.ripple;\n  };\n\n  private readonly renderRipple = () => {\n    return html`<md-ripple unbounded ?disabled=${this.disabled}></md-ripple>`;\n  };\n\n  private renderFocusRing(): TemplateResult {\n    return html`<md-focus-ring .visible=${this.showFocusRing}></md-focus-ring>`;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}