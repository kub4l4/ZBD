{"ast":null,"code":"import { catchError, mergeMap } from \"rxjs\";\nimport { fromFetch } from \"rxjs/internal/observable/dom/fetch\";\nimport { HttpError } from \"./HttpError\";\nexport class ApiConnector {\n  constructor() {\n    this.url = 'localhost:8080';\n    this.handleError = error => {\n      throw error;\n    };\n    this.ensureSuccessCode = response => {\n      if (response.status < 200 || response.status >= 300) {\n        throw new HttpError(response.status, `ERROR: ${response.status}`);\n      }\n    };\n    this.parseResponse = async response => {\n      try {\n        return await response.json();\n      } catch {\n        return {};\n      }\n    };\n  }\n  get(url, headers) {\n    console.log(`--> GET [${url}] ${JSON.stringify(headers)}`);\n    return fromFetch(url, {\n      method: 'GET',\n      headers: {\n        Accept: 'aplication/json',\n        ...headers\n      }\n    }).pipe(catchError(this.handleError), mergeMap(response => {\n      this.ensureSuccessCode(response);\n      return this.parseResponse(response);\n    }));\n  }\n}","map":{"version":3,"names":["catchError","mergeMap","fromFetch","HttpError","ApiConnector","url","handleError","error","ensureSuccessCode","response","status","parseResponse","json","get","headers","console","log","JSON","stringify","method","Accept","pipe"],"sources":["C:/Users/macie/IdeaProjects/ztbd/src/api/ApiConnector.ts"],"sourcesContent":["import {catchError, mergeMap, Observable} from \"rxjs\";\r\nimport {fromFetch} from \"rxjs/internal/observable/dom/fetch\";\r\nimport {HttpError} from \"./HttpError\";\r\n\r\nexport abstract class ApiConnector {\r\n\r\n    protected url = 'localhost:8080';\r\n\r\n    protected get<T>(url: string, headers?: Record<string, string>): Observable<T> {\r\n        console.log(`--> GET [${url}] ${JSON.stringify(headers)}`)\r\n        return fromFetch(url, {method: 'GET', headers: {Accept: 'aplication/json', ...headers},}).pipe(\r\n            catchError(this.handleError),\r\n            mergeMap((response) => {\r\n                this.ensureSuccessCode(response);\r\n                return this.parseResponse<T>(response);\r\n            })\r\n        )\r\n    }\r\n\r\n    private readonly handleError = (error: any) => {\r\n        throw error;\r\n    }\r\n\r\n    private readonly ensureSuccessCode = (response: Response) => {\r\n        if (response.status < 200 || response.status >= 300) {\r\n            throw new HttpError(response.status, `ERROR: ${response.status}`\r\n            )\r\n        }\r\n    }\r\n\r\n    private readonly parseResponse = async <T>(response: Response): Promise<T> => {\r\n        try {\r\n            return await response.json()\r\n        } catch {\r\n            return {} as T;\r\n        }\r\n    }\r\n\r\n}"],"mappings":"AAAA,SAAQA,UAAU,EAAEC,QAAQ,QAAmB,MAAM;AACrD,SAAQC,SAAS,QAAO,oCAAoC;AAC5D,SAAQC,SAAS,QAAO,aAAa;AAErC,OAAO,MAAeC,YAAY,CAAC;EAAA;IAAA,KAErBC,GAAG,GAAG,gBAAgB;IAAA,KAafC,WAAW,GAAIC,KAAU,IAAK;MAC3C,MAAMA,KAAK;IACf,CAAC;IAAA,KAEgBC,iBAAiB,GAAIC,QAAkB,IAAK;MACzD,IAAIA,QAAQ,CAACC,MAAM,GAAG,GAAG,IAAID,QAAQ,CAACC,MAAM,IAAI,GAAG,EAAE;QACjD,MAAM,IAAIP,SAAS,CAACM,QAAQ,CAACC,MAAM,EAAG,UAASD,QAAQ,CAACC,MAAO,EAAC,CAC/D;MACL;IACJ,CAAC;IAAA,KAEgBC,aAAa,GAAG,MAAUF,QAAkB,IAAiB;MAC1E,IAAI;QACA,OAAO,MAAMA,QAAQ,CAACG,IAAI,EAAE;MAChC,CAAC,CAAC,MAAM;QACJ,OAAO,CAAC,CAAC;MACb;IACJ,CAAC;EAAA;EA5BSC,GAAG,CAAIR,GAAW,EAAES,OAAgC,EAAiB;IAC3EC,OAAO,CAACC,GAAG,CAAE,YAAWX,GAAI,KAAIY,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAE,EAAC,CAAC;IAC1D,OAAOZ,SAAS,CAACG,GAAG,EAAE;MAACc,MAAM,EAAE,KAAK;MAAEL,OAAO,EAAE;QAACM,MAAM,EAAE,iBAAiB;QAAE,GAAGN;MAAO;IAAE,CAAC,CAAC,CAACO,IAAI,CAC1FrB,UAAU,CAAC,IAAI,CAACM,WAAW,CAAC,EAC5BL,QAAQ,CAAEQ,QAAQ,IAAK;MACnB,IAAI,CAACD,iBAAiB,CAACC,QAAQ,CAAC;MAChC,OAAO,IAAI,CAACE,aAAa,CAAIF,QAAQ,CAAC;IAC1C,CAAC,CAAC,CACL;EACL;AAqBJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}