{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { isFormAssociated } from './form-associated.js';\n// TODO Label activation shim is currently only needed for Safari. Remove it\n// when no longer needed, see b/261871554.\n/**\n * Returns true if labeling is supported for form associated custom elemeents.\n * Chrome and Firefox currently do and Safari support appears to be in progress,\n * see https://bugs.webkit.org/show_bug.cgi?id=197960.\n */\nexport const SUPPORTS_FACE_LABEL = ('labels' in (globalThis?.ElementInternals?.prototype ?? {}));\nfunction isCustomElement(element) {\n  return element.localName.match('-');\n}\n// Elements that can be associated with a <label> element include <button>,\n// <input> (except for type=\"hidden\"), <meter>, <output>, <progress>, <select>\n// and <textarea>.\nconst implicitLabelReactive = new Set(['button', 'input', 'meter', 'progress', 'output', 'select', 'textarea']);\nfunction isLabelReactive(element) {\n  return implicitLabelReactive.has(element.localName) || isFormAssociated(element);\n}\n/**\n * Provides a shim for labeling form associated custom elements via clicks\n * on label elements. Note, this is currently needed only in Safari and\n * support appears to be in progress, see\n * https://bugs.webkit.org/show_bug.cgi?id=197960.\n */\nexport function shimLabelSupport(root) {\n  // Listen for clicks on root to find clicks on label elements\n  root.addEventListener('click', labelActivationListener);\n}\nfunction labelActivationListener(event) {\n  // Find label on which user clicked.\n  const path = event.composedPath();\n  const root = event.currentTarget;\n  let label = undefined;\n  for (let i = 0; i < path.length; i++) {\n    const target = path[i];\n    // Not element or not in scope.\n    if (target.nodeType !== Node.ELEMENT_NODE || target.getRootNode() !== root) {\n      continue;\n    }\n    // If the click is on a label reactive element, this is not a label click.\n    if (isLabelReactive(target)) {\n      return;\n    }\n    if (target.localName === 'label') {\n      label = target;\n    }\n  }\n  if (label === undefined) {\n    return;\n  }\n  // Find associated element to activate.\n  const forId = label.getAttribute('for');\n  const target = forId ? root.getElementById(forId) : Array.from(label.querySelectorAll('*')).find(el => isCustomElement(el) && isFormAssociated(el));\n  if (target == null) {\n    return;\n  }\n  // Simulate FACE by issuing a click on the associated element.\n  const simulatedClick = new PointerEvent('click', {\n    composed: true,\n    bubbles: true\n  });\n  target.dispatchEvent(simulatedClick);\n}","map":{"version":3,"mappings":"AAAA;;;;;AAMA,SAAQA,gBAAgB,QAAO,sBAAsB;AAErD;AACA;AAEA;;;;;AAKA,OAAO,MAAMC,mBAAmB,IAC5B,QAAQ,KAAKC,UAAU,EAAEC,gBAAgB,EAAEC,SAAS,IAAI,EAAE,CAAC;AAE/D,SAASC,eAAe,CAACC,OAAoB;EAC3C,OAAOA,OAAO,CAACC,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC;AACrC;AAEA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,IAAIC,GAAG,CACjC,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;AAE7E,SAASC,eAAe,CAACL,OAAoB;EAC3C,OAAOG,qBAAqB,CAACG,GAAG,CAACN,OAAO,CAACC,SAAS,CAAC,IAC/CP,gBAAgB,CAACM,OAAO,CAAC;AAC/B;AAEA;;;;;;AAMA,OAAM,SAAUO,gBAAgB,CAACC,IAAyB;EACxD;EACAA,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAEC,uBAAuB,CAAC;AACzD;AAEA,SAASA,uBAAuB,CAACC,KAAY;EAC3C;EACA,MAAMC,IAAI,GAAGD,KAAK,CAACE,YAAY,EAAE;EACjC,MAAML,IAAI,GAAGG,KAAK,CAACG,aAAsC;EACzD,IAAIC,KAAK,GAA+BC,SAAS;EACjD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,MAAME,MAAM,GAAGP,IAAI,CAACK,CAAC,CAAgB;IACrC;IACA,IAAIE,MAAM,CAACC,QAAQ,KAAKC,IAAI,CAACC,YAAY,IACrCH,MAAM,CAACI,WAAW,EAAE,KAAKf,IAAI,EAAE;MACjC;;IAEF;IACA,IAAIH,eAAe,CAACc,MAAM,CAAC,EAAE;MAC3B;;IAEF,IAAIA,MAAM,CAAClB,SAAS,KAAK,OAAO,EAAE;MAChCc,KAAK,GAAGI,MAA0B;;;EAGtC,IAAIJ,KAAK,KAAKC,SAAS,EAAE;IACvB;;EAEF;EACA,MAAMQ,KAAK,GAAGT,KAAK,CAACU,YAAY,CAAC,KAAK,CAAC;EACvC,MAAMN,MAAM,GAAGK,KAAK,GAChBhB,IAAI,CAACkB,cAAc,CAACF,KAAK,CAAC,GAC1BG,KAAK,CAACC,IAAI,CAACb,KAAK,CAACc,gBAAgB,CAAc,GAAG,CAAC,CAAC,CAC/CC,IAAI,CAAEC,EAAE,IAAKhC,eAAe,CAACgC,EAAE,CAAC,IAAIrC,gBAAgB,CAACqC,EAAE,CAAC,CAAC;EAClE,IAAIZ,MAAM,IAAI,IAAI,EAAE;IAClB;;EAEF;EACA,MAAMa,cAAc,GAChB,IAAIC,YAAY,CAAC,OAAO,EAAE;IAACC,QAAQ,EAAE,IAAI;IAAEC,OAAO,EAAE;EAAI,CAAC,CAAC;EAC9DhB,MAAM,CAACiB,aAAa,CAACJ,cAAc,CAAC;AACtC","names":["isFormAssociated","SUPPORTS_FACE_LABEL","globalThis","ElementInternals","prototype","isCustomElement","element","localName","match","implicitLabelReactive","Set","isLabelReactive","has","shimLabelSupport","root","addEventListener","labelActivationListener","event","path","composedPath","currentTarget","label","undefined","i","length","target","nodeType","Node","ELEMENT_NODE","getRootNode","forId","getAttribute","getElementById","Array","from","querySelectorAll","find","el","simulatedClick","PointerEvent","composed","bubbles","dispatchEvent"],"sources":["C:\\Users\\macie\\IdeaProjects\\ztbd\\node_modules\\@material\\web\\controller\\shim-label-activation.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {isFormAssociated} from './form-associated.js';\n\n// TODO Label activation shim is currently only needed for Safari. Remove it\n// when no longer needed, see b/261871554.\n\n/**\n * Returns true if labeling is supported for form associated custom elemeents.\n * Chrome and Firefox currently do and Safari support appears to be in progress,\n * see https://bugs.webkit.org/show_bug.cgi?id=197960.\n */\nexport const SUPPORTS_FACE_LABEL =\n    'labels' in (globalThis?.ElementInternals?.prototype ?? {});\n\nfunction isCustomElement(element: HTMLElement) {\n  return element.localName.match('-');\n}\n\n// Elements that can be associated with a <label> element include <button>,\n// <input> (except for type=\"hidden\"), <meter>, <output>, <progress>, <select>\n// and <textarea>.\nconst implicitLabelReactive = new Set(\n    ['button', 'input', 'meter', 'progress', 'output', 'select', 'textarea']);\n\nfunction isLabelReactive(element: HTMLElement) {\n  return implicitLabelReactive.has(element.localName) ||\n      isFormAssociated(element);\n}\n\n/**\n * Provides a shim for labeling form associated custom elements via clicks\n * on label elements. Note, this is currently needed only in Safari and\n * support appears to be in progress, see\n * https://bugs.webkit.org/show_bug.cgi?id=197960.\n */\nexport function shimLabelSupport(root: Document|ShadowRoot) {\n  // Listen for clicks on root to find clicks on label elements\n  root.addEventListener('click', labelActivationListener);\n}\n\nfunction labelActivationListener(event: Event) {\n  // Find label on which user clicked.\n  const path = event.composedPath();\n  const root = event.currentTarget as ShadowRoot | Document;\n  let label: HTMLLabelElement|undefined = undefined;\n  for (let i = 0; i < path.length; i++) {\n    const target = path[i] as HTMLElement;\n    // Not element or not in scope.\n    if (target.nodeType !== Node.ELEMENT_NODE ||\n        target.getRootNode() !== root) {\n      continue;\n    }\n    // If the click is on a label reactive element, this is not a label click.\n    if (isLabelReactive(target)) {\n      return;\n    }\n    if (target.localName === 'label') {\n      label = target as HTMLLabelElement;\n    }\n  }\n  if (label === undefined) {\n    return;\n  }\n  // Find associated element to activate.\n  const forId = label.getAttribute('for');\n  const target = forId ?\n      root.getElementById(forId) :\n      Array.from(label.querySelectorAll<HTMLElement>('*'))\n          .find((el) => isCustomElement(el) && isFormAssociated(el));\n  if (target == null) {\n    return;\n  }\n  // Simulate FACE by issuing a click on the associated element.\n  const simulatedClick =\n      new PointerEvent('click', {composed: true, bubbles: true});\n  target.dispatchEvent(simulatedClick);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}