{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate, __metadata } from \"tslib\";\nimport { bound } from '../decorators/bound.js';\nimport { isFormAssociated } from './form-associated.js';\nimport { shimLabelSupport, SUPPORTS_FACE_LABEL } from './shim-label-activation.js';\n/**\n * A unique symbol key for `FormController` elements to implement their\n * `getFormValue()` function.\n */\nexport const getFormValue = Symbol('getFormValue');\n/**\n * A `ReactiveController` that adds `<form>` support to an element.\n *\n * Elements should also set `static formAssociated = true` which\n * provides platform support for forms. When an element is form associated,\n * it can be activated via clicks on associated label elements. It is the\n * responsibility of the element to process this click and perform any necessary\n * activation tasks, for example focusing and clicking on an internal element.\n *\n */\nexport class FormController {\n  /**\n   * Creates a new `FormController` for the given element.\n   *\n   * @param element The element to add `<form>` support to.\n   */\n  constructor(element) {\n    this.element = element;\n  }\n  hostConnected() {\n    // If the component internals are not in Shadow DOM, subscribing to form\n    // data events could lead to duplicated data, which may not work correctly\n    // on the server side.\n    if (!this.element.shadowRoot || window.ShadyDOM?.inUse) {\n      return;\n    }\n    // Preserve a reference to the form, since on hostDisconnected it may be\n    // null if the child was removed.\n    this.form = this.element.form;\n    this.form?.addEventListener('formdata', this.formDataListener);\n    // TODO(b/261871554) Label activation shim is currently only needed for\n    // Safari. Remove it when no longer needed.\n    if (isFormAssociated(this.element) && !SUPPORTS_FACE_LABEL) {\n      shimLabelSupport(this.element.getRootNode());\n    }\n  }\n  hostDisconnected() {\n    this.form?.removeEventListener('formdata', this.formDataListener);\n  }\n  formDataListener(event) {\n    if (this.element.disabled) {\n      // Check for truthiness since some elements may not support disabling.\n      return;\n    }\n    const value = this.element[getFormValue]();\n    // If given a `FormData` instance, append all values to the form. This\n    // allows elements to customize what is added beyond a single name/value\n    // pair.\n    if (value instanceof FormData) {\n      for (const [key, dataValue] of value) {\n        event.formData.append(key, dataValue);\n      }\n      return;\n    }\n    // Do not associate the value with the form if there is no value or no name.\n    if (value === null || !this.element.name) {\n      return;\n    }\n    event.formData.append(this.element.name, value);\n  }\n}\n__decorate([bound, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [FormDataEvent]), __metadata(\"design:returntype\", void 0)], FormController.prototype, \"formDataListener\", null);","map":{"version":3,"mappings":"AAAA;;;;;;AAQA,SAAQA,KAAK,QAAO,wBAAwB;AAE5C,SAAQC,gBAAgB,QAAO,sBAAsB;AACrD,SAAQC,gBAAgB,EAAEC,mBAAmB,QAAO,4BAA4B;AAkChF;;;;AAIA,OAAO,MAAMC,YAAY,GAAGC,MAAM,CAAC,cAAc,CAAC;AAElD;;;;;;;;;;AAUA,OAAM,MAAOC,cAAc;EAGzB;;;;;EAKAC,YAA6BC,OAAoB;IAApB,YAAO,GAAPA,OAAO;EAAgB;EAEpDC,aAAa;IACX;IACA;IACA;IACA,IAAI,CAAC,IAAI,CAACD,OAAO,CAACE,UAAU,IAAIC,MAAM,CAACC,QAAQ,EAAEC,KAAK,EAAE;MACtD;;IAGF;IACA;IACA,IAAI,CAACC,IAAI,GAAG,IAAI,CAACN,OAAO,CAACM,IAAI;IAC7B,IAAI,CAACA,IAAI,EAAEC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAACC,gBAAgB,CAAC;IAE9D;IACA;IACA,IAAIf,gBAAgB,CAAC,IAAI,CAACO,OAAO,CAAC,IAAI,CAACL,mBAAmB,EAAE;MAC1DD,gBAAgB,CAAC,IAAI,CAACM,OAAO,CAACS,WAAW,EAA2B,CAAC;;EAEzE;EAEAC,gBAAgB;IACd,IAAI,CAACJ,IAAI,EAAEK,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAACH,gBAAgB,CAAC;EACnE;EAGQA,gBAAgB,CAACI,KAAoB;IAC3C,IAAI,IAAI,CAACZ,OAAO,CAACa,QAAQ,EAAE;MACzB;MACA;;IAGF,MAAMC,KAAK,GAAG,IAAI,CAACd,OAAO,CAACJ,YAAY,CAAC,EAAE;IAC1C;IACA;IACA;IACA,IAAIkB,KAAK,YAAYC,QAAQ,EAAE;MAC7B,KAAK,MAAM,CAACC,GAAG,EAAEC,SAAS,CAAC,IAAIH,KAAK,EAAE;QACpCF,KAAK,CAACM,QAAQ,CAACC,MAAM,CAACH,GAAG,EAAEC,SAAS,CAAC;;MAEvC;;IAGF;IACA,IAAIH,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,CAACd,OAAO,CAACoB,IAAI,EAAE;MACxC;;IAGFR,KAAK,CAACM,QAAQ,CAACC,MAAM,CAAC,IAAI,CAACnB,OAAO,CAACoB,IAAI,EAAEN,KAAK,CAAC;EACjD;;AAvBAO,YADC7B,KAAK,wEAC0B8B,aAAa,iGAuB5C","names":["bound","isFormAssociated","shimLabelSupport","SUPPORTS_FACE_LABEL","getFormValue","Symbol","FormController","constructor","element","hostConnected","shadowRoot","window","ShadyDOM","inUse","form","addEventListener","formDataListener","getRootNode","hostDisconnected","removeEventListener","event","disabled","value","FormData","key","dataValue","formData","append","name","__decorate","FormDataEvent"],"sources":["C:\\Users\\macie\\IdeaProjects\\ztbd\\node_modules\\@material\\web\\controller\\form-controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ReactiveController, ReactiveControllerHost} from 'lit';\n\nimport {bound} from '../decorators/bound.js';\n\nimport {isFormAssociated} from './form-associated.js';\nimport {shimLabelSupport, SUPPORTS_FACE_LABEL} from './shim-label-activation.js';\n\ndeclare global {\n  interface Window {\n    ShadyDOM?: {inUse: boolean;};\n  }\n}\n\n/**\n * An element that `FormController` may use.\n */\nexport interface FormElement extends ReactiveControllerHost, HTMLElement {\n  /**\n   * The `<form>` that this element is associated with.\n   */\n  readonly form: HTMLFormElement|null;\n  /**\n   * The name of the element in the form. This property should reflect to a\n   * `name` attribute.\n   */\n  name: string;\n  /**\n   * Whether or not this element is disabled. If present, this property should\n   * reflect to a `disabled` attribute.\n   */\n  disabled?: boolean;\n  /**\n   * A function that retrieves the current form value for this element.\n   *\n   * @return The current form value, or `null` if there is no value.\n   */\n  [getFormValue](): string|File|FormData|null;\n}\n\n/**\n * A unique symbol key for `FormController` elements to implement their\n * `getFormValue()` function.\n */\nexport const getFormValue = Symbol('getFormValue');\n\n/**\n * A `ReactiveController` that adds `<form>` support to an element.\n *\n * Elements should also set `static formAssociated = true` which\n * provides platform support for forms. When an element is form associated,\n * it can be activated via clicks on associated label elements. It is the\n * responsibility of the element to process this click and perform any necessary\n * activation tasks, for example focusing and clicking on an internal element.\n *\n */\nexport class FormController implements ReactiveController {\n  private form?: HTMLFormElement|null;\n\n  /**\n   * Creates a new `FormController` for the given element.\n   *\n   * @param element The element to add `<form>` support to.\n   */\n  constructor(private readonly element: FormElement) {}\n\n  hostConnected() {\n    // If the component internals are not in Shadow DOM, subscribing to form\n    // data events could lead to duplicated data, which may not work correctly\n    // on the server side.\n    if (!this.element.shadowRoot || window.ShadyDOM?.inUse) {\n      return;\n    }\n\n    // Preserve a reference to the form, since on hostDisconnected it may be\n    // null if the child was removed.\n    this.form = this.element.form;\n    this.form?.addEventListener('formdata', this.formDataListener);\n\n    // TODO(b/261871554) Label activation shim is currently only needed for\n    // Safari. Remove it when no longer needed.\n    if (isFormAssociated(this.element) && !SUPPORTS_FACE_LABEL) {\n      shimLabelSupport(this.element.getRootNode() as Document | ShadowRoot);\n    }\n  }\n\n  hostDisconnected() {\n    this.form?.removeEventListener('formdata', this.formDataListener);\n  }\n\n  @bound\n  private formDataListener(event: FormDataEvent) {\n    if (this.element.disabled) {\n      // Check for truthiness since some elements may not support disabling.\n      return;\n    }\n\n    const value = this.element[getFormValue]();\n    // If given a `FormData` instance, append all values to the form. This\n    // allows elements to customize what is added beyond a single name/value\n    // pair.\n    if (value instanceof FormData) {\n      for (const [key, dataValue] of value) {\n        event.formData.append(key, dataValue);\n      }\n      return;\n    }\n\n    // Do not associate the value with the form if there is no value or no name.\n    if (value === null || !this.element.name) {\n      return;\n    }\n\n    event.formData.append(this.element.name, value);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}